{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"python_for_data_analysis3.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTDataMining/2020A/blob/master/week3/python_for_data_analysis3.ipynb","timestamp":1602488218207}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"whKCegwdvaMV"},"source":["# データマイニング概論\n","# Pythonの基礎"]},{"cell_type":"markdown","metadata":{"id":"FgcKmkTvvaMW"},"source":["## NumPyライブラリ\n","**NumPy**ライブラリを用いることにより、Python標準のリストよりも効率的に多次元の配列を扱うことができます。これにより高速な行列演算が可能になるため、行列演算を行う科学技術計算などでよく活用されています。以下では、NumPyライブラリの配列の基本的な操作や機能を説明します。"]},{"cell_type":"markdown","metadata":{"id":"t_sLuuLtvaMX"},"source":["## 配列の作成\n","NumPyライブラリを使用するには、まず`numpy`モジュールをインポートします。慣例として、同モジュールを`np`と別名をつけてコードの中で使用します。"]},{"cell_type":"code","metadata":{"id":"-xEtxYrdvaMY","executionInfo":{"status":"ok","timestamp":1605630887780,"user_tz":-540,"elapsed":1399,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["import numpy as np"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q8MAPxDfvaMe"},"source":["NumPyの**配列**は`numpy`モジュールの**`array`**`()`関数で作ります。配列の要素はPython標準のリストやタプルで指定します。"]},{"cell_type":"code","metadata":{"id":"uoz3VD2nvaMf","executionInfo":{"status":"ok","timestamp":1605630889824,"user_tz":-540,"elapsed":1070,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9186f211-0396-47b3-b1cd-d5e1da8bdae0","colab":{"base_uri":"https://localhost:8080/"}},"source":["# リストから配列作成\n","list_to_array = np.array([1,2,3,4,5])\n","list_to_array"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 4, 5])"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"-9euPZBuvaMj"},"source":["NumPyの配列は`ndarray`オブジェクトとなります。"]},{"cell_type":"code","metadata":{"id":"4GfOcOnWvaMk","executionInfo":{"status":"ok","timestamp":1605630891529,"user_tz":-540,"elapsed":1079,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"8b90bea8-9125-4136-80fe-a039aa2ee030","colab":{"base_uri":"https://localhost:8080/"}},"source":["# タプルからの配列作成\n","tuple_to_array = np.array((1,2,3,4,5))\n","\n","# 配列の型\n","type(tuple_to_array)"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"7CzMWbpPvaMm"},"source":["`print()`関数を使って配列を出力すると、要素が空白で区切られて出力されます。"]},{"cell_type":"code","metadata":{"id":"ijtTpXp2vaMn","executionInfo":{"status":"ok","timestamp":1605630893007,"user_tz":-540,"elapsed":923,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"39c13a84-585e-4eaf-b800-bf95b663d527","colab":{"base_uri":"https://localhost:8080/"}},"source":["# 配列のprint\n","print(list_to_array)\n","print(tuple_to_array)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[1 2 3 4 5]\n","[1 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KAGMI225vaMp"},"source":["`array()`関数では、第2引数`dtype`で配列の要素の型を指定することができます。NumPyの配列はリストと異なり、要素の型を混在させることはできません。配列の要素の型は`dtype`属性で調べることができます。"]},{"cell_type":"code","metadata":{"id":"yNSHOLOsvaMp","executionInfo":{"status":"ok","timestamp":1603127362537,"user_tz":-540,"elapsed":876,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"24ba8758-7813-473e-9fd7-6d7a3212854b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 配列要素の型の指定\n","list_to_array = np.array([1,2,3,4,5], dtype=float)\n","\n","# 配列要素の型の確認\n","list_to_array.dtype"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('float64')"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"8lohWBNlvaMr"},"source":["配列を`array()`関数に渡し、第2引数dtypeで型を指定すると、既存の配列を別の型に変換した配列を作成できます。"]},{"cell_type":"code","metadata":{"id":"cLA9twqrvaMs","executionInfo":{"status":"ok","timestamp":1603127367169,"user_tz":-540,"elapsed":843,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"82919180-3c63-4210-c3cd-06e848a2c77e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["int_array = np.array([1,2,3,4,5])\n","\n","# 配列要素の型の変換\n","float_array = np.array(int_array, dtype=float)\n","float_array"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 2., 3., 4., 5.])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"tt4BO-hJvaMu"},"source":["## 多次元配列の作成\n","**多次元配列**は、配列の中に配列がある入れ子の配列です。NumPyは多次元配列を効率的に扱うことができます。NumPyでは、`array()`関数の引数にリストが入れ子になった多重リストを与えると多次元配列が作成できます。\n","\n","**`shape`**属性で、配列が何行何列かを調べることができます。また、**`ndim`**属性で、何次元の配列かを調べることができます。**`size`**属性では、配列の要素の個数を調べることができます。"]},{"cell_type":"code","metadata":{"id":"oFxf8IWQvaMu","executionInfo":{"status":"ok","timestamp":1605634599914,"user_tz":-540,"elapsed":1216,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"44f2175b-4838-4d83-cbf9-0ae58666e48c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# 多次元配列の作成\n","mul_array = np.array([[1,2,3],[4,5,6]])\n","print(np.sum(mul_array[:,2]-3))\n","\n","# 多次元配列の行数と列数\n","print(mul_array.shape)\n","\n","# 多次元配列の次元数\n","print(mul_array.ndim)\n","\n","# 多次元配列の要素数\n","print(mul_array.size)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["3\n","(2, 3)\n","2\n","6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TEJ9c5m9vaMw"},"source":["**`reshape`**`()`メソッドを使うと、`reshape`(行数、列数）と指定して、1次元配列を多次元配列に変換することができます。`reshape()`で変換した多次元配列の操作の結果は元の配列にも反映されることに注意してください。\n","\n","**`ravel`**`()`メソッドまたは**`flatten`**`()`メソッドを使うと、多次元配列を1次元配列に戻すことができます。"]},{"cell_type":"code","metadata":{"id":"qpk_Jb_IvaMw","executionInfo":{"status":"ok","timestamp":1603127379883,"user_tz":-540,"elapsed":984,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"72c67719-17ca-41c4-b420-ef7194f31d32","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["mydata = [1,2,3,4,5,6]\n","a1 = np.array(mydata)\n","\n","# 2行3列の多次元配列に変換\n","a2 = a1.reshape(2,3) \n","print(a1)\n","print(a2)\n","\n","# 1行1列の要素に代入（後述）\n","a2[0,0]=0\n","print(a1)\n","print(a2)\n","\n","# 多次元配列を1次元配列に戻す\n","print(a2.ravel())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 2 3 4 5 6]\n","[[1 2 3]\n"," [4 5 6]]\n","[0 2 3 4 5 6]\n","[[0 2 3]\n"," [4 5 6]]\n","[0 2 3 4 5 6]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TSSOypfvvaMy"},"source":["## 練習\n","以下のリストから1次元配列を作成し、その配列から3行3列の多次元配列を作成してください。作成した配列のshape属性を確認してください。"]},{"cell_type":"code","metadata":{"id":"kTv9qlB-vaMy","executionInfo":{"status":"ok","timestamp":1603127523754,"user_tz":-540,"elapsed":643,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"2b28e03e-eb16-4569-ca41-68ccd301f53c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["mylist=[1,2,3,4,5,6,7,8,9]\n","a = np.array(mylist)\n","a = a.reshape(3,3)\n","print(a.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(3, 3)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ssfQbX5wvaMz"},"source":["## 様々な配列の作り方"]},{"cell_type":"markdown","metadata":{"id":"g2wgFrlnvaMz"},"source":["### zeros()関数\n","**`zeros`**`()`関数を用いると、すべての要素が0の配列を作成することができます。`zero()`関数の第1引数には0の個数を（多次元配列の場合は行数と列数をタプルで）指定し、第2引数の`dtype`に数値の型を指定します。"]},{"cell_type":"code","metadata":{"id":"VPBFhTe2vaM0","executionInfo":{"status":"ok","timestamp":1603127538353,"user_tz":-540,"elapsed":797,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4656e039-4d35-40d3-fa9f-2758f62f9b42","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["# 5つの0要素からなる配列\n","zero_array1=np.zeros(5, dtype=int)\n","print(zero_array1)\n","\n","# 3行3列の0要素からなる多次元配列\n","zero_array2=np.zeros((3,3), dtype=int)\n","print(zero_array2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 0 0 0 0]\n","[[0 0 0]\n"," [0 0 0]\n"," [0 0 0]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7C17Cy4_vaM1"},"source":["### ones()関数\n","**`ones`**`()`関数を用いると、すべての要素が1の配列を作成することができます。`ones()`関数の第1引数には1の個数を（多次元配列の場合は行数と列数をタプルで）指定し、第2引数の`dtype`に数値の型を指定します。"]},{"cell_type":"code","metadata":{"id":"MNSVBly4vaM1","executionInfo":{"status":"ok","timestamp":1603127553611,"user_tz":-540,"elapsed":895,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"06b816a0-d5e3-4278-dc8f-d275f8a5f421","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# 2行2列の1要素からなる多次元配列\n","one_array=np.ones((2,2), dtype=int)\n","print(one_array)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 1]\n"," [1 1]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mOXRUU7GvaM3"},"source":["### arange()関数\n","**`arange`**`()`関数を用いると、開始値から一定の刻み幅で生成した値の要素からなる配列を作成できます。`arange()`関数の第1引数には開始値、第2引数には終了値、第3引数には刻み幅を指定します。終了値は生成される値に含まれないことに注意してください。開始値を省略すると0、刻み幅を省略すると1がそれぞれ初期値となります。`arange()`関数では`dtype`で数値の型も指定できますが、省略すると開始値、終了値、刻み幅に合わせて型が選ばれます。\n","```Python\n","numpy.arange(開始値、終了値、刻み幅、dtype=型）\n","```"]},{"cell_type":"code","metadata":{"id":"33umboXCvaM3","executionInfo":{"status":"ok","timestamp":1603127559149,"user_tz":-540,"elapsed":940,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"596230f9-a63c-44b2-e82c-790179d9e043","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["# 0から1刻みで5つの要素を持つ配列\n","a1=np.arange(5)\n","print(a1)\n","\n","# 0から0.1刻みで1未満の値の要素を持つ配列\n","a2=np.arange(0,1,0.1)\n","print(a2)\n","\n","# 0から1刻みで4つの要素を持つ配列を2行2列の多次元配列に変換\n","a3=np.arange(2*2).reshape(2,2)\n","print(a3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 1 2 3 4]\n","[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\n","[[0 1]\n"," [2 3]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Zj74t4bZvaM4"},"source":["### linspace()関数\n","**`linspace`**`()`関数を用いると、分割数を指定することで値の範囲を等間隔で分割した値の要素からなる配列を作成できます。`linspace()`関数の第1引数には開始値、第2引数には終了値、第3引数には分割数を指定します。"]},{"cell_type":"code","metadata":{"id":"3m6wYEaFvaM5","executionInfo":{"status":"ok","timestamp":1603127570512,"user_tz":-540,"elapsed":779,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"af55397c-b5e0-4137-c2af-604c80b45b7b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 0から100の値を11分割した値を要素に持つ配列\n","a=np.linspace(0,100,11)\n","print(a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[  0.  10.  20.  30.  40.  50.  60.  70.  80.  90. 100.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4aG4ZCCavaM6"},"source":["### random.rand()関数\n","**`random.rand`**`()`関数を用いると、乱数の配列を作成することができます。`random.rand()`関数では、引数で与えた個数の乱数が0から1の間の値で生成されます。この他にも、`random.randn()`関数、`random.binomial()`関数、`random.poisson()`関数を用いると、それぞれ正規分布、二項分布、ポアソン分布から乱数の配列を作成することができます。\n","- [random.*関数](https://docs.scipy.org/doc/numpy/reference/routines.random.html)"]},{"cell_type":"code","metadata":{"id":"RH33-8cfvaM6","executionInfo":{"status":"ok","timestamp":1603127578917,"user_tz":-540,"elapsed":895,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"05359935-a7f1-47cd-bf5f-731f3f4e590b","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# 5つのランダムな値の要素からなる多次元配列\n","rand_array=np.random.rand(5)\n","print(rand_array)\n","\n","# 平均mu,分散sigmaの正規分布に従う値の要素からなる多次元配列\n","mu, sigma = 0, 1\n","rand_normal_array=sigma*np.random.rand(10)+mu\n","print(rand_normal_array)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.75200354 0.36993755 0.23340949 0.15944478 0.45900647]\n","[0.42146461 0.92605172 0.31323371 0.59717218 0.16156635 0.96156084\n"," 0.32857614 0.73994734 0.63579289 0.74487839]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9ixNLV8vvaM7"},"source":["## 練習\n","9つのランダムな値の要素から3行3列の多次元配列を作成してください。"]},{"cell_type":"code","metadata":{"id":"2oLsRlDbvaM8","executionInfo":{"status":"ok","timestamp":1603127659137,"user_tz":-540,"elapsed":790,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"2dc0d93b-ab94-4afa-b2f8-ba917ec4048a","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a = np.random.rand(9).reshape(3,3)\n","print(a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.55006185 0.54189504 0.43528352]\n"," [0.67524862 0.11182142 0.74497246]\n"," [0.65947631 0.55474077 0.19330968]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mEBnoCvwvaM9"},"source":["## csvファイルからの配列の作成\n","`loadtxt()`関数を用いて、以下のように**csvファイル**を読み込んで、配列を作成することができます。`loadtxt()`関数の`delimiter`引数には区切り文字を指定します。また、`skiprows`引数を`=1`とすることで、csvファイルの先頭行（ヘッダ）を飛ばすように指定します（配列は異なる型の要素を混在できないため）。\n","```Python\n","## simple_score.csv\n","user, kokugo, shakai, sugaku, rika\n","1, 30, 43, 51, 63\n","2, 39, 21, 49, 56\n","...\n","```"]},{"cell_type":"code","metadata":{"id":"SqLv1DIIvaM9","executionInfo":{"status":"ok","timestamp":1603127689102,"user_tz":-540,"elapsed":1134,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"65f5cf63-02f5-4a7f-b6e6-59c6d058e9d8","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/week3/simple_score.csv"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2020-10-19 17:14:48--  https://raw.githubusercontent.com/UTDataMining/2020A/master/week3/simple_score.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 102 [text/plain]\n","Saving to: ‘simple_score.csv’\n","\n","simple_score.csv    100%[===================>]     102  --.-KB/s    in 0.001s  \n","\n","2020-10-19 17:14:48 (73.5 KB/s) - ‘simple_score.csv’ saved [102/102]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ki7bJtu8vaM_","executionInfo":{"status":"ok","timestamp":1603127741529,"user_tz":-540,"elapsed":931,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"82dc7d43-9311-4b6e-a62b-6e5f8640e9f0","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  1.,  30.,  43.,  51.,  63.],\n","       [  2.,  39.,  21.,  49.,  56.],\n","       [  3.,  29.,  30.,  23.,  57.],\n","       [  4.,  95.,  87.,  77., 100.],\n","       [  5.,  70.,  71.,  78.,  67.]])"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"OfjMxWgWvaNA"},"source":["## 配列要素の操作\n","### インデックス\n","NumPyの配列の要素には、リストと同様に0から始まる**インデックス**を使ってアクセスします。リストと同じく、配列の先頭要素のインデックスは0、最後の要素のインデックスは-1となります。"]},{"cell_type":"code","metadata":{"id":"2j2nmt9NvaNA","executionInfo":{"status":"ok","timestamp":1603127773792,"user_tz":-540,"elapsed":850,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"902b9117-65af-4f64-dd5a-912df718541c","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = np.array([1,3,5,7,9])\n","print(a)\n","\n","# 配列aのインデックス0の要素\n","print(a[0])\n","\n","# 配列aのインデックス-1(終端）の要素\n","print(a[-1])\n","\n","# 配列aのインデックス-1の要素に代入\n","a[-1]=0\n","print(a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 3 5 7 9]\n","1\n","9\n","[1 3 5 7 0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ofnUUoFbvaNC"},"source":["多次元配列では、`array[行,列]`のように行と列で要素にアクセスできます。この時、行と列はインデックスと同じくそれぞれ0から始まります。また、多次元リストと同様に、`array[インデックス][インデックス]`のようにリストごとのインデックスを使っても要素にアクセスできます。"]},{"cell_type":"code","metadata":{"id":"8CArCS8ivaNC","outputId":"e44c3193-6292-43a7-8962-8795d3836dfd"},"source":["a = np.array([[1,2,3],[4,5,6]])\n","print(a)\n","\n","# 1行2列の要素\n","print(a[1,2])\n","\n","# 1行2列の要素に代入\n","a[1,2]=0\n","\n","# 1行2列の要素\n","print(a[1][2])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 2 3]\n"," [4 5 6]]\n","6\n","0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OQdHl7-avaND"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、3行4列の要素を抽出してください。"]},{"cell_type":"code","metadata":{"id":"WspOqK0AvaND","executionInfo":{"status":"ok","timestamp":1603127893800,"user_tz":-540,"elapsed":750,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c05fe738-1166-412e-a5b2-98ec440e6f03","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = np.loadtxt('simple_score.csv',delimiter=',',skiprows=1)\n","print(a[3,4])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZUWAX6v4vaNI"},"source":["### スライス\n","リストと同様に、NumPyの配列でも、`array[開始位置:終了位置:ステップ]`のように**スライス**を用いて配列の要素を抜き出すことができます。リストと同じく、スライスの開始位置や終了位置は省略が可能です。"]},{"cell_type":"code","metadata":{"id":"7Ws6v4GtvaNQ","executionInfo":{"status":"ok","timestamp":1603127914287,"user_tz":-540,"elapsed":795,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0ba2ae59-d014-4545-ea18-f610267ae3a2","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["a = np.array([1,10,100,1000,10000])\n","\n","# 配列aのインデックス1からインデックス3までの要素をスライス\n","print(a[1:4])\n","\n","# 配列aのインデックス1から終端までの要素をスライス\n","print(a[1:])\n","\n","# 配列aの先頭から終端から3番目までの要素をスライス\n","print(a[:-2])\n","\n","# 配列aの先頭から1つ飛ばしで要素をスライス\n","print(a[::2])\n","\n","# 配列aの終端から先頭までの要素をスライス\n","print(a[::-1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[  10  100 1000]\n","[   10   100  1000 10000]\n","[  1  10 100]\n","[    1   100 10000]\n","[10000  1000   100    10     1]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-G-b4KBBvaNS"},"source":["NumPyの配列では、配列からスライスで抜き出した要素に値をまとめて代入することができます。配列においてスライスに対する変更は元の配列にも反映されることに注意してください。"]},{"cell_type":"code","metadata":{"id":"7aeglrxWvaNS","executionInfo":{"status":"ok","timestamp":1603127953416,"user_tz":-540,"elapsed":827,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"2702373d-6ee9-4214-b8d6-d788f8e3821a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = np.array([1,10,100,1000,10000])\n","\n","# 配列aのインデックス1からインデックス3までの要素に0を代入\n","a[1:4]=0\n","print(a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[    1     0     0     0 10000]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rZ7xGQ_nvaNT"},"source":["多次元配列のスライスでは、`array[行のスライス,　列のスライス]`のように行と列のスライスのそれぞれの指定をカンマで区切って指定します。"]},{"cell_type":"code","metadata":{"id":"ejw2mKRVvaNT","executionInfo":{"status":"ok","timestamp":1603127973876,"user_tz":-540,"elapsed":829,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"507c78cc-b78a-4c68-8d04-646b0101c66e","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["a = np.array( [1,2,3,4,5,6,7,8,9]).reshape(3,3)\n","print(a)\n","\n","# 多次元配列aの先頭行から2行目、先頭列から2列目までの要素をスライス\n","print(a[:2,:2])\n","\n","# 多次元配列aの2行目から終端行、2列目から終端列までの要素をスライス\n","print(a[1:,1:])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","[[1 2]\n"," [4 5]]\n","[[5 6]\n"," [8 9]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JwZWAXnPvaNU"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、1列目を除いた全ての列を抽出してください。"]},{"cell_type":"code","metadata":{"id":"RqVLr5KbvaNU","executionInfo":{"status":"ok","timestamp":1603128058767,"user_tz":-540,"elapsed":779,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"65357bea-5eeb-4a26-f8bf-99b77cd123cd","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["a = np.loadtxt('simple_score.csv',delimiter=',',skiprows=1)\n","print(a[:,1:])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[ 30.  43.  51.  63.]\n"," [ 39.  21.  49.  56.]\n"," [ 29.  30.  23.  57.]\n"," [ 95.  87.  77. 100.]\n"," [ 70.  71.  78.  67.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8paqnMKZvaNV"},"source":["### 要素の順序取り出し\n","リストと同様に、`for...in`文を用いて、配列の要素を順番に取り出すことができます。**`enumerate`**`()`関数を使うと、リストと同じく、取り出しの繰り返し回数も併せて数えることができますが、多次元配列の要素の取り出しでは`enumerate`関数の代わりに`ndenumerate()`関数を用います。`ndenumerate()`関数は取り出した要素とともに、その要素の位置を行と列のタプルで返します。"]},{"cell_type":"code","metadata":{"id":"b35dhqcSvaNV","executionInfo":{"status":"ok","timestamp":1603128108525,"user_tz":-540,"elapsed":778,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"700bbe44-407a-4a23-b920-9330fa1d2474","colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["a1 = np.array([1,2,3,4,5,6])\n","\n","# 配列a1から要素の取り出し\n","for num in a1:\n","    print(num)\n","    \n","a2 = np.array([1,2,3,4,5,6]).reshape(2,3)\n","\n","# 多次元配列a2から行の要素と繰り返し回数の取り出し\n","for i, num in enumerate(a2):\n","    print(i, num)\n","                \n","# 多次元配列a2から要素の取り出し、要素の位置を行と列のタプルで取得\n","for i, num in np.ndenumerate(a2):\n","    print(i, num)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","0 [1 2 3]\n","1 [4 5 6]\n","(0, 0) 1\n","(0, 1) 2\n","(0, 2) 3\n","(1, 0) 4\n","(1, 1) 5\n","(1, 2) 6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OKdzvqgOvaNW"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、得点の要素の値を取り出してください。"]},{"cell_type":"code","metadata":{"id":"c56UtIcUvaNW","executionInfo":{"status":"ok","timestamp":1603128180527,"user_tz":-540,"elapsed":736,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"60edadf4-612b-4964-9f39-8d8d602af07e","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:]\n","print(score)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[ 30.  43.  51.  63.]\n"," [ 39.  21.  49.  56.]\n"," [ 29.  30.  23.  57.]\n"," [ 95.  87.  77. 100.]\n"," [ 70.  71.  78.  67.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oo8p8I_UvaNX"},"source":["### 要素の並び替え\n","配列の要素の並び替えには、`ndarray`オブジェクトの**`sort`**`()`メソッドまたはNumPyライブラリの`sort()`関数を使います。`sort()`メソッドは、メソッドを呼び出した自身の配列の要素を並び替えますが、`sort()`関数は引数で与えた配列の要素を並び替えた新しい配列を返します。`sort()`関数の引数にリストやタプルを指定し、それらの並び替えを行った結果を配列として取得することもできます。"]},{"cell_type":"code","metadata":{"id":"AuYpaN8SvaNX","executionInfo":{"status":"ok","timestamp":1603128189100,"user_tz":-540,"elapsed":1075,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c4c0d97e-1a75-4a40-8b1b-20757eeccd18","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a1 = np.array([5,3,1,4,2])\n","# 配列a1の要素を並び替え\n","a1.sort()\n","print(a1)\n","\n","a2 = np.array([5,3,1,4,2])\n","# 配列a2の要素を並び替えた結果から新たな配列a3を作成\n","a3 = np.sort(a2)\n","\n","print(a2)\n","print(a3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 2 3 4 5]\n","[5 3 1 4 2]\n","[1 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fcxmzvhlvaNY"},"source":["## 要素の条件取り出し\n","条件式を用いて、配列の要素の中から条件に合う要素のみを抽出し、要素の値を変更したり、新たな配列を作成することができます。配列と比較演算を組み合わせることで、比較演算が配列の個々の要素に適用されます。\n","\n","条件式のブール演算では、`and`、`or`、`not`の代わりに`&`、`|`、`~`を用います。"]},{"cell_type":"code","metadata":{"id":"xmKqnZP0vaNY","executionInfo":{"status":"ok","timestamp":1603128265208,"user_tz":-540,"elapsed":916,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"55a84633-d810-4845-e2df-b41a5e61ee07","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a1 = np.array([1,2,-3,-4,5,-6,-7])\n","\n","# 0未満で2で割り切れる値を持つ要素に0を代入\n","a1[(a1<0) & (a1%2==0)]=0\n","print(a1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 1  2 -3  0  5  0 -7]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c8aOkb2wvaNZ"},"source":["以下の例において、`print(a1>0)`とすると`[ True  True False False  True False False]`というブール値の配列が返ってきていることがわかります。`True`は条件（この場合は要素が正）に対して真な要素（この場合は1,2,5）に対応しています。配列要素の条件取り出しでは、このブール値の配列を元の配列に渡して、条件に対して真な要素のインデックスを参照していることになります。これを**ブールインデックス参照**と呼びます。"]},{"cell_type":"code","metadata":{"id":"IPXt6YMhvaNZ","executionInfo":{"status":"ok","timestamp":1603128274935,"user_tz":-540,"elapsed":802,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"da4841ef-7948-442a-f9f2-9177004f6992","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a1 = np.array([1,2,-3,-4,5,-6,-7])\n","\n","# 0より大きい値を持つ要素はTrue, それ以外はFalseのブール値配列\n","print(a1>0)\n","\n","# 配列a1の0より大きい値を持つ要素から新たな配列a2の作成\n","a2 = a1[a1>0]\n","print(a2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ True  True False False  True False False]\n","[1 2 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JGanyP6fvaNa"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、50点以上の得点の要素の値を取り出してください。"]},{"cell_type":"code","metadata":{"id":"nbh03zO2vaNa","executionInfo":{"status":"ok","timestamp":1603128316005,"user_tz":-540,"elapsed":726,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1fa6d81b-ce34-4a50-c60f-5b63f26c97a4","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:]\n","print(score[score>=50])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 51.  63.  56.  57.  95.  87.  77. 100.  70.  71.  78.  67.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HIK27TfyvaNb"},"source":["## 配列の演算\n","NumPyの配列では、配列のすべての要素に数値演算を適用する**ブロードキャスト**という機能により、要素が数値である配列の演算を簡単に行うことができます。"]},{"cell_type":"code","metadata":{"id":"ESqeZrZxvaNb","executionInfo":{"status":"ok","timestamp":1603128329312,"user_tz":-540,"elapsed":821,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6ceff042-d236-49e6-9b96-835915da7e0a","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a = np.array([1,2,3,4, 5])\n","\n","# 配列aのすべての要素に1を加算\n","b = a+1\n","print(b)\n","\n","# 配列bのすべての要素に2を乗算\n","c=b*2\n","print(c)\n","\n","# 配列cのすべての要素に2を除算\n","d=c/2\n","print(d)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2 3 4 5 6]\n","[ 4  6  8 10 12]\n","[2. 3. 4. 5. 6.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mQmdHM6uvaNc"},"source":["この他に、NumPyには**ユニバーサル関数**と呼ばれる、配列を入力としてのそのすべての要素を操作した結果を配列として返す関数が複数あります。ユニバーサル関数については以下を参照してください。\n","\n","- [ユニバーサル関数の一覧](https://docs.scipy.org/doc/numpy/reference/ufuncs.html)"]},{"cell_type":"markdown","metadata":{"id":"xeBu8aHovaNc"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、得点の各要素の値を2乗にしてください。"]},{"cell_type":"code","metadata":{"id":"7vopIbX2vaNc","executionInfo":{"status":"ok","timestamp":1603128363004,"user_tz":-540,"elapsed":902,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e9551178-7c0f-4a36-9e7c-fed5e55b94a9","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:]\n","print(score**2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[  900.  1849.  2601.  3969.]\n"," [ 1521.   441.  2401.  3136.]\n"," [  841.   900.   529.  3249.]\n"," [ 9025.  7569.  5929. 10000.]\n"," [ 4900.  5041.  6084.  4489.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dumlP2zHvaNd"},"source":["`ndarray`オブジェクトのメソッドを用いて、要素の合計、平均値、最大値、最小値を、それぞれ`sum()`、`mean()`、`max()`、`min()`で求めることができます。各メソッドは引数を指定しなければ配列のすべての要素に適用されます。多次元配列の場合、引数に0を指定すると、各列にメソッドを適用した結果の配列、引数に1を指定すると各行にメソッドを適用した結果の配列が返ります。"]},{"cell_type":"code","metadata":{"id":"yO6BRKdgvaNd","executionInfo":{"status":"ok","timestamp":1603128370687,"user_tz":-540,"elapsed":850,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"86a8a7a3-f9a3-4fc4-eaf3-e97082e08e6f","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:] # 得点の列だけ抽出\n","\n","# 多次元配列scoreのすべての要素の平均\n","print(score.mean())\n","\n","# 多次元配列aの各列の要素の平均\n","print(score.mean(0))\n","\n","# 多次元配列aの各行の要素の平均\n","print(score.mean(1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56.8\n","[52.6 50.4 55.6 68.6]\n","[46.75 41.25 34.75 89.75 71.5 ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LBMmt1jWvaNe"},"source":["この他のNumPyの数学・統計関連のメソッド・関数については以下を参照してください。\n","\n","- [数学関数](https://docs.scipy.org/doc/numpy/reference/routines.math.html)\n","- [統計関数](https://docs.scipy.org/doc/numpy/reference/routines.statistics.html)"]},{"cell_type":"markdown","metadata":{"id":"Dy6eNxHTvaNe"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、得点の各列の最大値と最小値を求めてください。"]},{"cell_type":"code","metadata":{"id":"DvmQ5cCyvaNe","executionInfo":{"status":"ok","timestamp":1603128409798,"user_tz":-540,"elapsed":831,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"115f3386-908e-49cd-e8e4-5129b09608d3","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:]\n","print(score.max(0))\n","print(score.min(0))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 95.  87.  78. 100.]\n","[29. 21. 23. 56.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IwmYe-gNvaNg"},"source":["## 配列同士の演算\n","行数と列数が同じ配列同士の四則演算は、各要素同士の演算となります。"]},{"cell_type":"code","metadata":{"id":"wyy9YsKZvaNg","executionInfo":{"status":"ok","timestamp":1603128418194,"user_tz":-540,"elapsed":805,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4601923a-be4c-433c-ba2a-4359c9a3648c","colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["A = np.array([1,2,3,4]).reshape(2,2)\n","B = np.array([2,4,6,8]).reshape(2,2)\n","\n","# 配列の要素同士の足し算\n","C = A+B\n","print(C)\n","\n","# 配列の要素同士の引き算\n","D = B-A\n","print(D)\n","\n","# 配列の要素同士の掛け算\n","E = A*B\n","print(E)\n","\n","# 配列の要素同士の割り算\n","F = B//A\n","print(F)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[ 3  6]\n"," [ 9 12]]\n","[[1 2]\n"," [3 4]]\n","[[ 2  8]\n"," [18 32]]\n","[[2 2]\n"," [2 2]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LtKqJjL0vaNh"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、得点の要素同士を掛け算して得点の各要素の値を2乗にしてください。"]},{"cell_type":"code","metadata":{"id":"dp-brjlzvaNh","executionInfo":{"status":"ok","timestamp":1603128450656,"user_tz":-540,"elapsed":791,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"012179f5-1ae3-4a94-cdef-d8a8898ea024","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:] \n","\n","print(score*score)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[  900.  1849.  2601.  3969.]\n"," [ 1521.   441.  2401.  3136.]\n"," [  841.   900.   529.  3249.]\n"," [ 9025.  7569.  5929. 10000.]\n"," [ 4900.  5041.  6084.  4489.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XWhS1ZfRvaNh"},"source":["## ブロードキャスト\n","行数と列数が異なる配列や行列同士の四則演算では、足りない行や列の値を補うブロードキャストが行われます。以下の例では、配列Aと演算に対して、配列`B`の2行目が足りないため、`B`の1行目と同じ値で2行目を補い演算を行なっています。このようなブロードキャストが機能するのは、`B`の行数または列数が`A`のそれらと同じ場合、または配列`B`が1行・1列の場合です。"]},{"cell_type":"code","metadata":{"id":"YH40H11QvaNi","executionInfo":{"status":"ok","timestamp":1603128466935,"user_tz":-540,"elapsed":779,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9535b7f3-4a12-4739-8792-19c409bc7181","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["A = np.array([1,2,3,4]).reshape(2,2)\n","B = np.array([2,4])\n","\n","# 行列Bをブロードキャストして行列Aと足し算\n","C = A+B\n","print(C)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[3 6]\n"," [5 8]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"INQegXocvaNi"},"source":["## 行列の演算"]},{"cell_type":"markdown","metadata":{"id":"fTQCWQAcvaNj"},"source":["`dot()`関数を使うとベクトルの**内積**や**行列積**を計算することができます。この時、それぞれの配列の行数と列数、または列数と行数が同じである必要があります。"]},{"cell_type":"code","metadata":{"id":"7MDQ8N7dvaNj","executionInfo":{"status":"ok","timestamp":1603128500931,"user_tz":-540,"elapsed":766,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1642ad01-4249-47cd-92c2-c8b6a25d4273","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["A = np.array([1,2,3,4]).reshape(2,2)\n","B = np.array([2,4,6,8]).reshape(2,2)\n","\n","# 行列積\n","C = np.dot(A,B)\n","print(C)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[14 20]\n"," [30 44]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"N2xXIWBdvaNk"},"source":["単位行列は`identity()`関数または`eye()`関数で作成することができます。引数に行列のサイズを指定します。"]},{"cell_type":"code","metadata":{"id":"5nljONsevaNk","executionInfo":{"status":"ok","timestamp":1603128504005,"user_tz":-540,"elapsed":761,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f1d8ffa5-d870-4b5e-9f9a-f90852db806a","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# 3行3列の単位行列\n","E=np.identity(3, dtype=int)\n","print(E)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 0 0]\n"," [0 1 0]\n"," [0 0 1]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W2mqxWFRvaNl"},"source":["`transpose()`関数または配列の`T`属性で、配列の行と列の要素を入れ替えた配列を得ることができます。この時、元の配列の形状を変えているだけで元の配列を直接変更していないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"nOItYk6QvaNl","executionInfo":{"status":"ok","timestamp":1603128510494,"user_tz":-540,"elapsed":781,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"a49c7791-aaa4-44fb-b704-676189833fbf","colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["A = np.array([1,2,3,4,5,6]).reshape(2,3)\n","\n","# 配列の行と列の入れ替え\n","print(np.transpose(A))\n","print(A.T)\n","print(A)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 4]\n"," [2 5]\n"," [3 6]]\n","[[1 4]\n"," [2 5]\n"," [3 6]]\n","[[1 2 3]\n"," [4 5 6]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ES7wRwaZvaNm"},"source":["NumPyでは、行列の分解、転置、行列式などの計算を含む線形代数の機能は、`numpy.linalg`モジュールで提供されています。同モジュールについては以下を参照してください。\n","- [線形代数関連関数](https://docs.scipy.org/doc/numpy/reference/routines.linalg.html)"]},{"cell_type":"markdown","metadata":{"id":"CSpGCrspvaNm"},"source":["## 練習\n","csvファイル、simple_score.csv、から配列を作成し、各行を得点の各列を値を要素とするベクトルとみなし、1行目との他の行との内積をそれぞれ計算してください。"]},{"cell_type":"code","metadata":{"id":"wbx3rQHvvaNm","executionInfo":{"status":"ok","timestamp":1603128703171,"user_tz":-540,"elapsed":1004,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"d0fcaa81-2ebd-4ee5-848c-7365a6ea22b6","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["score = np.loadtxt(\"simple_score.csv\", delimiter=\",\", skiprows=1)\n","score=score[:,1:] \n","print(np.dot(score[0,:],score[1:,:]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[11672. 10830. 11300. 13452.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"powd6QcXvaNn"},"source":["## 配列要素の追加、挿入、削除\n","### append()関数\n","NumPyの配列の要素の追加には**`append`**`()`関数を使います。`append()`関数の第1引数には配列を指定し、第2引数にはその配列に追加する値を指定します。リストやタプルで複数の値を同時に指定することもできます。NumPyの`append()`関数は、要素を追加した新しい配列が返り、元の配列は変化しないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"8oqsqMLhvaNn","executionInfo":{"status":"ok","timestamp":1603129038023,"user_tz":-540,"elapsed":1581,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9f3a8cf2-7a0f-4847-e333-a4a5606e58f9","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a1 = np.array([1,2])\n","\n","# 配列a1に値3を要素として追加\n","a2 = np.append(a1, 3)\n","\n","# 配列a2に値4,5を要素として追加\n","a3 = np.append(a2,[4,5])\n","\n","print(a1)\n","print(a2)\n","print(a3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 2]\n","[1 2 3]\n","[1 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fipeAlBnvaNo"},"source":["多次元配列に要素を追加する場合は、`append`関数の`axis`引数に対して、行追加であれば0、列追加であれば1を渡します。追加する要素は、追加先の配列の行または列と同じ次元の配列である必要があります。"]},{"cell_type":"code","metadata":{"id":"L95P_74KvaNo","executionInfo":{"status":"ok","timestamp":1603129071209,"user_tz":-540,"elapsed":1744,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"24835b38-732f-4ed7-c582-4db19363e5f9","colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["mul_array1 = np.array([[1,2,3],[4,5,6]])\n","\n","#  多次元配列mul_array1に行[7,8,9]を追加\n","mul_array2 = np.append(mul_array1, [[7,8,9]], axis =0)\n","\n","#  多次元配列mul_array2に列[0,0,0]を追加\n","mul_array3 = np.append(mul_array2, np.array([[0,0,0]]).T, axis =1)\n","\n","print(mul_array1)\n","print(mul_array2)\n","print(mul_array3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 2 3]\n"," [4 5 6]]\n","[[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","[[1 2 3 0]\n"," [4 5 6 0]\n"," [7 8 9 0]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PaeBDEvHvaNp"},"source":["### insert()関数\n","NumPyの配列の要素の挿入には**`insert`**`()`関数を使います。`insert()`関数の第1引数には配列、第2引数には要素を挿入する位置、第3引数にはその配列に追加する値を指定します。値は、リストやタプルで複数を同時に指定することもできます。NumPyの`insert()`関数は、要素を追加した新しい配列が返り、元の配列は変化しないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"fowGmH0pvaNp","executionInfo":{"status":"ok","timestamp":1603129076427,"user_tz":-540,"elapsed":1417,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1bc15f63-8150-458d-8898-a53562941ed0","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a1 = np.array([1,3])\n","\n","# 配列a1のインデックス1に値2を要素として追加\n","a2 = np.insert(a1, 1, 2)\n","\n","# 配列a2のインデックス3に値4,5を要素として追加\n","a3 = np.insert(a2, 3, [4,5])\n","\n","print(a1)\n","print(a2)\n","print(a3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 3]\n","[1 2 3]\n","[1 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DCiR80NCvaNq"},"source":["多次元配列に要素を挿入する場合は、axis引数に対して、行追加であれば0、列追加であれば1を渡します。挿入する要素は、挿入先の配列の行または列と同じ次元の配列である必要があります。"]},{"cell_type":"code","metadata":{"id":"agTSnAwTvaNq","executionInfo":{"status":"ok","timestamp":1603129102025,"user_tz":-540,"elapsed":919,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"41a13d1a-41a7-4f46-fcdc-493e3c370bc6","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["mul_array1 = np.array([[1,2,3],[7,8,9]])\n","\n","#  多次元配列mul_array1に行[4,5,6]を追加\n","mul_array2 = np.insert(mul_array1, 1, [[4,5,6]], axis =0)\n","\n","print(mul_array1)\n","print(mul_array2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1 2 3]\n"," [7 8 9]]\n","[[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HnkO9LMsvaNr"},"source":["### delete()関数\n","NumPyの配列の要素の削除には**`delete`**`()`関数を使います。`delete()`関数の第1引数には配列、第2引数には削除する要素の位置を指定します。`delete`関数でも`append()`関数、`insert()`関数と同様に、元の配列は変化しないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"84F-f2DbvaNr","executionInfo":{"status":"ok","timestamp":1603129139602,"user_tz":-540,"elapsed":1137,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e4d1e414-42ea-44f9-e5d4-bbce2fed7e27","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a1 = np.array([0,1,2])\n","\n","# 配列a1のインデックス2の要素を削除\n","a2 = np.delete(a1,2) \n","\n","print(a1)\n","print(a2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 1 2]\n","[0 1]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VtWnRFKjvaNs"},"source":[""],"execution_count":null,"outputs":[]}]}