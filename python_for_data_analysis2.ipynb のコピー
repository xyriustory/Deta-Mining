{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"python_for_data_analysis2.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTDataMining/2020A/blob/master/week2/python_for_data_analysis2.ipynb","timestamp":1601883420966}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"ZalLgvPrsShL"},"source":["# データマイニング概論\n","# Pythonの基礎"]},{"cell_type":"markdown","metadata":{"id":"OtGkXqxnsShN"},"source":["## pandasライブラリ\n","**pandas**ライブラリにはデータ分析作業を支援するためのモジュールが含まれています。以下では、pandasライブラリのモジュールの基本的な使い方について説明します。\n","\n","pandasライブラリを使用するには、まず`pandas`モジュールをインポートします。慣例として、同モジュールを`pd`と別名をつけてコードの中で使用します。"]},{"cell_type":"code","metadata":{"id":"djYWUNnLsShO","executionInfo":{"status":"ok","timestamp":1605726658246,"user_tz":-540,"elapsed":1814,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["import pandas as pd"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xLvN9xfKsShT"},"source":["## シリーズとデータフレーム\n","pandasは、リストや辞書などのデータを**シリーズ**(**Series**)あるいは**データフレーム**(**DataFrame**)のオブジェクトとして保持します。シリーズは列、データフレームは複数の列で構成されます。シリーズやデータフレームの行は**インデックス**`index`で管理され、インデックスには0から始まる番号、または任意のラベルが付けられています。シリーズやデータフレームは、インデックスをキー、各行を値とした辞書とみなすことができます。"]},{"cell_type":"markdown","metadata":{"id":"MWYH9DlzsShU"},"source":["## シリーズ（Series）の作成\n","シリーズのオブジェクトは、以下のように、リストや辞書から作成することができます。また、Numpyの配列からもシリーズやオブジェクトを作成することができます。"]},{"cell_type":"code","metadata":{"id":"aZCRtYYKsShV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605726742090,"user_tz":-540,"elapsed":1224,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"007e240a-4546-41c9-d406-33207b356f97"},"source":["# リストからシリーズの作成\n","s1 = pd.Series([0,1,2,3,4,5])\n","print(s1)\n","\n","# 辞書からシリーズの作成\n","s2 = pd.Series({0:'boo',1:'foo',2:'woo'})\n","print(s2)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["0    0\n","1    1\n","2    2\n","3    3\n","4    4\n","5    5\n","dtype: int64\n","0    boo\n","1    foo\n","2    woo\n","dtype: object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5XjMRxnOsShZ"},"source":["以下では、シリーズ（列）より一般的なデータフレームの操作と機能について説明していきますが、データフレームオブジェクトの多くの操作や機能はシリーズオブジェクトにも適用できます。"]},{"cell_type":"markdown","metadata":{"id":"AqrjdqzmsSha"},"source":["## データフレーム（DataFrame）の作成\n","データフレームのオブジェクトは、以下のように、リストや辞書、NumPyの配列から作成することができます。行のラベルは、`DataFrame`の`index`引数で指定できますが、以下のデータフレーム作成の例、d2, では同インデックスを省略しているため、０から始まるインデックス番号がラベルとして行に自動的に付けられます。列のラベルは`columns`引数で指定します。辞書からデータフレームを作成する際は、`columns`引数で列の順番を指定することになります。"]},{"cell_type":"code","metadata":{"id":"-Mh_fLGisSha","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605727649432,"user_tz":-540,"elapsed":768,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"71aad6c5-12e8-47fd-9361-f5e50b3c34df"},"source":["# 多次元リストからデータフレームの作成\n","d1 = pd.DataFrame([[0,1,2],[3,4,5],[6,7,8],[9,10,11]], index=[10,11,12,13], columns=['c1','c2','c3'])\n","print(d1)\n","\n","# 辞書からデータフレームの作成\n","d2 = pd.DataFrame({'Initial':['B','F','W'], 'Name':['boo', 'foo', 'woo']}, columns=['Name','Initial'])\n","print(d2)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["    c1  c2  c3\n","10   0   1   2\n","11   3   4   5\n","12   6   7   8\n","13   9  10  11\n","        Initial Name\n","Name          B  boo\n","Initial       F  foo\n","a             W  woo\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2U8f3rqQsShd"},"source":["## csvファイルからのデータフレームの作成\n","`pandas`の`read_csv()`関数を用いて、以下のように**csvファイル**を読み込んで、データフレームのオブジェクトを作成することができます。`read_csv()`関数の`encoding`引数にはファイルの文字コードを指定します。csvファイル\"simple_score.csv\"には、以下のようにuserのID(user)、国語の点数（kokugo）、社会の点数（shakai）、数学の点数（sugaku）、理科の点数（rika）のデータが1行ずつ含まれています。\n","```Python\n","## simple_score.csv\n","user, kokugo, shakai, sugaku, rika\n","1, 30, 43, 51, 63\n","2, 39, 21, 49, 56\n","...\n","```\n","`head()`関数を使うとデータフレームの先頭の複数行を表示させることができます。引数には表示させたい行数を指定し、行数を指定しない場合は、5行分のデータが表示されます。"]},{"cell_type":"code","metadata":{"id":"7qdryWWVsShe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605727919055,"user_tz":-540,"elapsed":1178,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0930cc5e-b1de-482c-d56b-50f26e1e39f6"},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/week2/simple_score.csv"],"execution_count":7,"outputs":[{"output_type":"stream","text":["--2020-11-18 19:31:58--  https://raw.githubusercontent.com/UTDataMining/2020A/master/week2/simple_score.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 102 [text/plain]\n","Saving to: ‘simple_score.csv’\n","\n","simple_score.csv    100%[===================>]     102  --.-KB/s    in 0s      \n","\n","2020-11-18 19:31:58 (6.38 MB/s) - ‘simple_score.csv’ saved [102/102]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sDrxTaXmsShg","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1605727927140,"user_tz":-540,"elapsed":772,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0878bba5-bd77-45c3-b23b-0b0ff3bca765"},"source":["# csvファイルの読み込み\n","df = pd.read_csv('simple_score.csv')\n","\n","# 先頭3行のデータを表示\n","df.head(3)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","0     1      30      43      51    63\n","1     2      39      21      49    56\n","2     3      29      30      23    57"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"qDs_JerLsShi"},"source":["データフレームオブジェクトの`index`属性により、データフレームのインデックスの情報が確認できます。`len()`関数を用いると、データフレームの行数が取得できます。"]},{"cell_type":"code","metadata":{"id":"fTnJwm8-sShi","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"ok","timestamp":1601889775692,"user_tz":-540,"elapsed":595,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"8a56fdf5-4acb-49ef-c57f-5347895a8f5c"},"source":["print(df.index) #インデックスの情報\n","len(df.index) #インデックスの長さ\n","df"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RangeIndex(start=0, stop=5, step=1)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","0     1      30      43      51    63\n","1     2      39      21      49    56\n","2     3      29      30      23    57\n","3     4      95      87      77   100\n","4     5      70      71      78    67"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"QJQCNOH4sShk"},"source":["## データの参照\n","シリーズやデータフレームでは、行の位置（行は0から始まります）を**スライス**として指定することで任意の行を抽出することができます。"]},{"cell_type":"code","metadata":{"id":"HDgWrgUasShk","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601889784837,"user_tz":-540,"elapsed":610,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"7161defa-4e8d-4375-b6af-13c1bd1bca15"},"source":["# データフレームの先頭3行のデータ\n","df[:3]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","0     1      30      43      51    63\n","1     2      39      21      49    56\n","2     3      29      30      23    57"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"5XYEX1uYsShm"},"source":["## 練習\n","データフレーム`df`の終端2行のデータをスライスを使って抽出してください"]},{"cell_type":"code","metadata":{"id":"D8TFkBnRsShm","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"ok","timestamp":1601889803151,"user_tz":-540,"elapsed":608,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"91dcafe4-19f5-4c33-98e4-0b9b9146f551"},"source":["df[-2:]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","3     4      95      87      77   100\n","4     5      70      71      78    67"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"f_0Ox_Q0sSho"},"source":["データフレームから任意の列を抽出するには、`DataFrame.列名`のように、データフレームオブジェクトに'.'で列名をつなげることで、その列を指定してシリーズオブジェクトとして抽出することができます。なお、列名を文字列として、`DataFrame['列名']`のように添字指定しても同様です。"]},{"cell_type":"code","metadata":{"id":"Vu5E8h23sSho","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1601890455241,"user_tz":-540,"elapsed":663,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9dd9d2a3-08f8-44ae-ba43-73198793f7db"},"source":["# データフレームの'sugaku'の列の先頭3行のデータ\n","df['sugaku'].head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    51\n","1    49\n","2    23\n","3    77\n","4    78\n","Name: sugaku, dtype: int64"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"smJPmghpsShp"},"source":["データフレームの添字として、列名のリストを指定すると複数の列をデータフレームオブジェクトとして抽出することができます。"]},{"cell_type":"code","metadata":{"id":"7agDQPbnsShp","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601890466813,"user_tz":-540,"elapsed":849,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"eab4d932-4c05-43e2-f3c0-181a4bacea9b"},"source":["# データフレームの'user'と'sugaku'の列の先頭3行のデータ\n","df[['user','sugaku']].head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>sugaku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  sugaku\n","0     1      51\n","1     2      49\n","2     3      23"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"v69OGd_6sShr"},"source":["## 練習\n","データフレーム`df`の'user'と'rika'の列の先頭3行のデータを抽出してください"]},{"cell_type":"code","metadata":{"id":"Bz06yBuqsShr","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601890493783,"user_tz":-540,"elapsed":599,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"5a015210-ef74-4977-c680-897d0df577a7"},"source":["df[['user','rika']].head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>57</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  rika\n","0     1    63\n","1     2    56\n","2     3    57"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"li7ybczysShs"},"source":["### ilocとloc\n","データフレームオブジェクトの**`iloc`**属性を用いると、行と列の位置を指定して任意の行と列を抽出することができます。"]},{"cell_type":"code","metadata":{"id":"BzZPOGVisSht","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1601890513614,"user_tz":-540,"elapsed":745,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"71bfe330-abfc-4d8b-d1ac-805ac80e1a36"},"source":["# データフレームの2行目のデータ\n","df.iloc[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["user       2\n","kokugo    39\n","shakai    21\n","sugaku    49\n","rika      56\n","Name: 1, dtype: int64"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"hWPDt_qCsShu","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1601890515760,"user_tz":-540,"elapsed":684,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"7063754a-5879-4895-eb5b-1929588f435b"},"source":["# データフレームの2行,2列目のデータ\n","df.iloc[1, 1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["39"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"gx8HUIx-sShv","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"ok","timestamp":1601890522417,"user_tz":-540,"elapsed":617,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"057e685b-97e0-4afb-8eeb-dfb06155f66e"},"source":["# データフレームの1から2行目,1から2列目のデータ\n","df.iloc[0:2, 0:2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo\n","0     1      30\n","1     2      39"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"whmXrpWXsShw"},"source":["データフレームオブジェクトの**`loc`**属性を用いると、抽出したい行のインデックス・ラベルや列のラベルを指定して任意の行と列を抽出することができます。複数のラベルはリストで指定します。行のインデックスは各行に割当てられた番号で、`iloc`で指定する行の位置とは必ずしも一致しないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"pUsLjgM0sShw","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1601890537379,"user_tz":-540,"elapsed":617,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"79b82af2-43d8-4054-f015-6898ba58903d"},"source":["# データフレームの行インデックス1のデータ\n","df.loc[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["user       2\n","kokugo    39\n","shakai    21\n","sugaku    49\n","rika      56\n","Name: 1, dtype: int64"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"6xsCUVU0sShy","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1601890542079,"user_tz":-540,"elapsed":643,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"d019d43a-a807-40f1-ad0e-1d76f5c3c1fb"},"source":["# データフレームの行インデックス2と'sugakuと列のデータ\n","df.loc[2, 'sugaku']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["23"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"5oKy1jDusShz","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"ok","timestamp":1601890554759,"user_tz":-540,"elapsed":584,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"30c5d488-753f-43ef-8f0a-ac5837951592"},"source":["# データフレームの行インデックス0から1と'user'と'kokugo'の列のデータ\n","df.loc[0:1, ['user','sugaku']]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>sugaku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>49</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  sugaku\n","0     1      51\n","1     2      49"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"gMT-2MKAsSh1"},"source":["## 練習\n","データフレーム`df`の3から4行目,1列目と5列目のデータを`iloc`, `loc`それぞれを使って抽出してください"]},{"cell_type":"code","metadata":{"id":"H66D6d4esSh1","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"ok","timestamp":1601891418701,"user_tz":-540,"elapsed":562,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"76c20d5a-d77b-45de-ca02-01fdb3e02192"},"source":["df.iloc[2:4, [0,4]]\n","df.loc[2:3,['user','rika']]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>57</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>100</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  rika\n","2     3    57\n","3     4   100"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"NyE4adGJsSh2"},"source":["## データの条件取り出し\n","データフレームの列の指定と併せて条件を指定することで、条件にあった行からなるデータフレームを抽出することができます。条件式のブール演算では、`and`、`or`、`not`の代わりに`&`、`|`、`~`を用います。"]},{"cell_type":"code","metadata":{"id":"-IIhx3C0sSh2","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601891471052,"user_tz":-540,"elapsed":696,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"08b5fc71-37e9-4750-bdd0-a5828a677055"},"source":["# データフレームの'sugaku'列の値が50より大きく、'rika'列の値が50より大きいデータ\n","df[(df['sugaku'] > 50) & (df['rika'] > 50)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","0     1      30      43      51    63\n","3     4      95      87      77   100\n","4     5      70      71      78    67"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"LjzldKz1sSh4"},"source":["## 練習\n","データフレーム`df`から`kokugo`と`shakai`がどちらとも50点以上でのデータを抽出してください"]},{"cell_type":"code","metadata":{"id":"Hnk0T71nsSh4","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"ok","timestamp":1601891765869,"user_tz":-540,"elapsed":675,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"80c65209-c4b5-4be5-947e-8f8b7949d6f6"},"source":["df[(df['kokugo'] >= 50) & (df['shakai'] >= 50)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika\n","3     4      95      87      77   100\n","4     5      70      71      78    67"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"qqV3D501sSh5"},"source":["## 列の追加と削除\n","データフレームに列を追加する場合は、以下のように、追加したい新たな列名を指定し、シリーズ、リストやNumPyの配列を代入すると新たな列を追加できます。"]},{"cell_type":"code","metadata":{"id":"cMjPw3rjsSh5","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601891776227,"user_tz":-540,"elapsed":630,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f11eff16-9580-4356-8110-f70ea99b2984"},"source":["# データフレームに'eigo'という列を追加\n","df['eigo']=[50,50,60,60,60]\n","\n","# データフレームに'ongaku'という列を追加\n","df['ongaku']=pd.Series([40,50,60,70,80])\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>ongaku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>80</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo  ongaku\n","0     1      30      43      51    63    50      40\n","1     2      39      21      49    56    50      50\n","2     3      29      30      23    57    60      60\n","3     4      95      87      77   100    60      70\n","4     5      70      71      78    67    60      80"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"LitmMIcHsSh6"},"source":["**`del`**ステートメントを用いると、以下のようにデータフレームから任意の列を削除できます。"]},{"cell_type":"code","metadata":{"id":"iinbVoZCsSh6","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601891806295,"user_tz":-540,"elapsed":735,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"a79e5d8b-e140-44a0-b78d-ffdb91d94b3c"},"source":["# データフレームから'ongaku'という列を削除\n","del df['ongaku']\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"eK88yOc0sSh7"},"source":["**`assign`**`()`メソッドを用いると、追加したい列名とその値を指定することで、以下のように新たな列を追加したデータフレームを新たに作成することができます。この際、元のデータフレームは変更されないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"tJxcAicIsSh8","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601891848078,"user_tz":-540,"elapsed":604,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c2639f99-293e-4f15-d3b1-82016ae4ad1e"},"source":["# データフレームに'ongaku'という列を追加し新しいデータフレームを作成\n","df1 = df.assign(ongaku=pd.Series([40,50,60,70,80]))\n","df1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>ongaku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>80</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo  ongaku\n","0     1      30      43      51    63    50      40\n","1     2      39      21      49    56    50      50\n","2     3      29      30      23    57    60      60\n","3     4      95      87      77   100    60      70\n","4     5      70      71      78    67    60      80"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"n1p8h0NSsSh9"},"source":["**`drop`**`()`メソッドを用いると、削除したい列名を指定することで、以下のように任意の列を削除したデータフレームを新たに作成することができます。列を削除する場合は、`axis`引数に1を指定します。この際、元のデータフレームは変更されないことに注意してください。"]},{"cell_type":"code","metadata":{"id":"D0KxE5kBsSh9","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601891954819,"user_tz":-540,"elapsed":583,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"fd6b5a23-46c8-490f-c6a1-a8b4115fe081"},"source":["# データフレームから'ongaku'という列を削除し、新しいデータフレームを作成\n","df2 = df1.drop('ongaku',axis=1)\n","df2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"xS071tY8sSh-"},"source":["## 練習\n","データフレーム`df2`に新たな列を追加して新しいデータフレームを作成してください"]},{"cell_type":"code","metadata":{"id":"m-zgjoB6sSh-","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601892013010,"user_tz":-540,"elapsed":523,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6392a516-c584-4f7f-ce02-9518e6cc43e4"},"source":["df3 = df2.assign(taiiku=pd.Series([64,73,85,74,90]))\n","df3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>taiiku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>73</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>85</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>74</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo  taiiku\n","0     1      30      43      51    63    50      64\n","1     2      39      21      49    56    50      73\n","2     3      29      30      23    57    60      85\n","3     4      95      87      77   100    60      74\n","4     5      70      71      78    67    60      90"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"jNdeC5XmsSh_"},"source":["## 行の追加と削除\n","`pandas`モジュールの**`append`**`()`関数を用いると、元のデータフレームに新たな行を追加した新たなデータフレームを作成することができます。以下では、`df`データフレームの最終行に新たな行を追加し、新たなデータフレームを作成しています。`ignore_index`引数をTrueにすると追加した行に新たなインデックス番号がつけられます。"]},{"cell_type":"code","metadata":{"id":"OUjYMRFBsSh_","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1601892271621,"user_tz":-540,"elapsed":937,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c0243056-17fc-4bd0-ffb8-945e95b35852"},"source":["# 追加する行のデータフレーム\n","row = pd.DataFrame([[6,10,20,30,40,50]], columns=df.columns)\n","\n","# データフレームに行を追加し新しいデータフレームを作成\n","df3 = df.append(row, ignore_index=True)\n","df3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>20</td>\n","      <td>30</td>\n","      <td>40</td>\n","      <td>50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60\n","5     6      10      20      30    40    50"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"3hy9BqxXsSiA"},"source":["**`drop`**`()`メソッドを用いると、行のインデックスまたはラベルを指定することで行を削除することもできます。この時に、`axis`引数は省略することができます。"]},{"cell_type":"code","metadata":{"id":"wHYk2fLJsSiA","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601892366956,"user_tz":-540,"elapsed":694,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"dc3e50c4-7747-464e-fffb-9388b607e695"},"source":["# データフレームから行インデックス5の行を削除し、新しいデータフレームを作成\n","df4 = df3.drop(5)\n","df4"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"markdown","metadata":{"id":"Eto2fpK4sSiB"},"source":["## 練習\n","データフレーム`df4`に新たな行を追加して新しいデータフレームを作成してください"]},{"cell_type":"code","metadata":{"id":"jMKs3bSWsSiB","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1601892547558,"user_tz":-540,"elapsed":392,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6cbd61a0-3d49-4dc2-9bd4-bd917429ebb5"},"source":["row = pd.DataFrame([[6,73,65,75,45,98]],columns = df.columns)\n","df4 = df.append(row,ignore_index=True)\n","df4"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>73</td>\n","      <td>65</td>\n","      <td>75</td>\n","      <td>45</td>\n","      <td>98</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60\n","5     6      73      65      75    45    98"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"YST-6kJ4sSiC"},"source":["## データの並び替え\n","データフレームオブジェクトの**`sort_index()`**メソッドで、データフレームのインデックスに基づくソートができます。また、**`sort_values()`**メソッドで、任意の列の値によるソートができます。列は複数指定することもできます。いずれのメソッドでも、`inplace`引数により、ソートにより新しいデータフレームを作成する（False）か、元のデータフレームを更新する（True)を指定できます。デフォルトは`inplace`はFalseになっており、`sort_index()`メソッドは新しいデータフレームを作成します。"]},{"cell_type":"code","metadata":{"id":"jXiyM_Y0sSiC","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601892589579,"user_tz":-540,"elapsed":641,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c37158c0-4b7d-4c07-c25f-6b8a5f05b8a2"},"source":["# データフレームの2つ列の値に基づいて昇順にソート\n","df5 = df.sort_values(['eigo', 'sugaku'])\n","df5"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","1     2      39      21      49    56    50\n","0     1      30      43      51    63    50\n","2     3      29      30      23    57    60\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"WsCcVP6IsSiD"},"source":["列の値で降順にソートする場合は、`sort_values()`メソッドの`ascending`引数をFalseにしてください。"]},{"cell_type":"code","metadata":{"id":"gQMZABgqsSiE","colab":{"base_uri":"https://localhost:8080/","height":198},"executionInfo":{"status":"error","timestamp":1602493039381,"user_tz":-540,"elapsed":867,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"973e7c6b-5979-4524-8ade-60b28b5f00bc"},"source":["# データフレームの2つ列の値に基づいて降順にソート\n","df6 = df.sort_values(['eigo', 'sugaku'],ascending=False)\n","df6"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-40c4756fd57a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# データフレームの2つ列の値に基づいて降順にソート\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf6\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'eigo'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'sugaku'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mascending\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf6\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"HSDPYBAusSiF"},"source":["## 練習\n","データフレーム`df6`を`eigo`と`rika`の列の値に基づいて降順に並び替えて新しいデータフレーム作成してください"]},{"cell_type":"code","metadata":{"id":"NJcl3pBysSiF","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601892886885,"user_tz":-540,"elapsed":567,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"81e202cf-3fc1-4d69-ae25-50eae139551c"},"source":["df7 = df6.sort_values(['eigo','rika'],ascending = False)\n","df7"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60\n","2     3      29      30      23    57    60\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"W-0RrV9BsSiG"},"source":["## データの統計量\n","データフレームオブジェクトの**`describe()`**メソッドで、データフレームの各列の要約統計量を求めることができます。要約統計量には平均、標準偏差、最大値、最小値などが含まれます。その他の統計量を求める`pandas`モジュールのメソッドは以下を参照してください。\n","\n","[pandasでの統計量計算](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#computations-descriptive-stats)"]},{"cell_type":"code","metadata":{"id":"kzhiSx6GsSiG","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1601893194250,"user_tz":-540,"elapsed":712,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9fcc743a-54d8-4138-d5f8-1e65ce4c8683"},"source":["# データフレームの各数値列の要約統計量を表示\n","df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.000000</td>\n","      <td>52.600000</td>\n","      <td>50.400000</td>\n","      <td>55.600000</td>\n","      <td>68.600000</td>\n","      <td>56.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.581139</td>\n","      <td>28.953411</td>\n","      <td>27.835229</td>\n","      <td>22.842942</td>\n","      <td>18.119051</td>\n","      <td>5.477226</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>29.000000</td>\n","      <td>21.000000</td>\n","      <td>23.000000</td>\n","      <td>56.000000</td>\n","      <td>50.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.000000</td>\n","      <td>30.000000</td>\n","      <td>30.000000</td>\n","      <td>49.000000</td>\n","      <td>57.000000</td>\n","      <td>50.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","      <td>39.000000</td>\n","      <td>43.000000</td>\n","      <td>51.000000</td>\n","      <td>63.000000</td>\n","      <td>60.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>4.000000</td>\n","      <td>70.000000</td>\n","      <td>71.000000</td>\n","      <td>77.000000</td>\n","      <td>67.000000</td>\n","      <td>60.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>5.000000</td>\n","      <td>95.000000</td>\n","      <td>87.000000</td>\n","      <td>78.000000</td>\n","      <td>100.000000</td>\n","      <td>60.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           user     kokugo     shakai     sugaku        rika       eigo\n","count  5.000000   5.000000   5.000000   5.000000    5.000000   5.000000\n","mean   3.000000  52.600000  50.400000  55.600000   68.600000  56.000000\n","std    1.581139  28.953411  27.835229  22.842942   18.119051   5.477226\n","min    1.000000  29.000000  21.000000  23.000000   56.000000  50.000000\n","25%    2.000000  30.000000  30.000000  49.000000   57.000000  50.000000\n","50%    3.000000  39.000000  43.000000  51.000000   63.000000  60.000000\n","75%    4.000000  70.000000  71.000000  77.000000   67.000000  60.000000\n","max    5.000000  95.000000  87.000000  78.000000  100.000000  60.000000"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"Jtpyibs8sSiH"},"source":["## 練習\n","データフレーム`df`の各列ごとの値の和を求めてください"]},{"cell_type":"code","metadata":{"id":"dyHi1ulNsSiH","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1601893424925,"user_tz":-540,"elapsed":471,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"a39ace92-7791-4f32-90ec-2663ca1ab7bd"},"source":["df.sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["user       15\n","kokugo    263\n","shakai    252\n","sugaku    278\n","rika      343\n","eigo      280\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"markdown","metadata":{"id":"4d0IRa3bsSiI"},"source":["## データの連結\n","`pandas`モジュールの**`concat`**`()`関数を用いると、データフレームを連結して新たなデータフレームを作成することができます。以下では、`df`データフレームの先頭2行と最終2行を連結して、新しいデータフレームを作成しています。"]},{"cell_type":"code","metadata":{"id":"C4cASkjMsSiI","outputId":"622e547e-0971-45f1-f368-73273be4f663"},"source":["# データフレームの先頭2行と最終2行を連結\n","concat_row_df = pd.concat([df[:2],df[-2:]])\n","concat_row_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo\n","0     1      30      43      51    63    50\n","1     2      39      21      49    56    50\n","3     4      95      87      77   100    60\n","4     5      70      71      78    67    60"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"BaJ4p4d7sSiJ"},"source":["`concat()`関数の`axis`引数に1を指定すると、以下のように、データフレームを列方向に連結することができます。"]},{"cell_type":"code","metadata":{"id":"x48E18F4sSiJ","outputId":"bd5cf421-ccfb-44f8-879c-c5d708d78226"},"source":["# データフレームの'user'列と'sugaku'列を連結\n","concat_column_df = pd.concat([df.loc[:, ['user']],df.loc[:, ['sugaku']]], axis=1)\n","concat_column_df.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>sugaku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>78</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  sugaku\n","0     1      51\n","1     2      49\n","2     3      23\n","3     4      77\n","4     5      78"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"zULu4Z-bsSiK"},"source":["## データの結合\n","`pandas`モジュールの**`merge`**`()`関数を用いると、任意の列の値をキーとして異なるデータフレームを結合することができます。結合のキーとする列名は`on`引数で指定します。以下では、まずデータフレーム`user_df`を作成し、2つのデータフレーム、`user_df`と`df`、に共通の'user'の列の値をキーに、2つのデータフレームを結合して新しいデータフレーム`score_df`を作成しています。"]},{"cell_type":"code","metadata":{"id":"sFx-KXe7sSiK","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601894020206,"user_tz":-540,"elapsed":667,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"44122d18-b3ff-4d9f-94d1-204d87d11ae0"},"source":["user_df = pd.DataFrame({'user':[1,2,3,4,5], 'name':['Paul', 'John', 'Ringo','Georgi','Yoko'],\\\n","                        'class':['A', 'A', 'A','B','B']}, \\\n","                        columns=['user','name', 'class'])\n","user_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>name</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Paul</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>John</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Ringo</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Georgi</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Yoko</td>\n","      <td>B</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user    name class\n","0     1    Paul     A\n","1     2    John     A\n","2     3   Ringo     A\n","3     4  Georgi     B\n","4     5    Yoko     B"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"77cEQ_KrsSiL","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601894033740,"user_tz":-540,"elapsed":738,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f4f384d5-709a-493d-d2a3-313e6fe0c8d0"},"source":["# dfとuser_dfを'user'をキーにして結合\n","score_df = pd.merge(df, user_df, on='user')\n","score_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>name</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>Paul</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>John</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>Ringo</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>Georgi</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>Yoko</td>\n","      <td>B</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo    name class\n","0     1      30      43      51    63    50    Paul     A\n","1     2      39      21      49    56    50    John     A\n","2     3      29      30      23    57    60   Ringo     A\n","3     4      95      87      77   100    60  Georgi     B\n","4     5      70      71      78    67    60    Yoko     B"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"OfKeORpCsSiM"},"source":["## 練習\n","以下のデータフレームとデータフレーム`df`を'user'列の値をキーにして結合して新たなデータフレームを作成してくだい"]},{"cell_type":"code","metadata":{"id":"hJtqmEidsSiM","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1601894119147,"user_tz":-540,"elapsed":647,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"fd9c4b14-7db9-47dc-a6bb-01f73ae5ccdc"},"source":["campus_df = pd.DataFrame({'user':[1,2,3,4,5], 'campus':['Komaba', 'Komaba', 'Hongo','Hongo','Hongo']}, columns=['user','campus'])\n","campus_df\n","mergedf = pd.merge(df,campus_df, on ='user')\n","mergedf"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>campus</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>Komaba</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>Komaba</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>Hongo</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>Hongo</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>Hongo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo  campus\n","0     1      30      43      51    63    50  Komaba\n","1     2      39      21      49    56    50  Komaba\n","2     3      29      30      23    57    60   Hongo\n","3     4      95      87      77   100    60   Hongo\n","4     5      70      71      78    67    60   Hongo"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"nbCU7_7ksSiN"},"source":["## データのグループ化\n","データフレームオブジェクトの**`groupby`**`()`メソッドを使うと、データフレームの任意の列の値に基づいて、同じ値を持つ行をグループにまとめることができます。列は複数指定することもできます。`groupby()`メソッドを適用するとグループ化オブジェクト（DataFrameGroupBy)が作成されますが、データフレームと同様の操作を多く適用することができます。"]},{"cell_type":"code","metadata":{"id":"4kCB1F5MsSiN","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1601894194218,"user_tz":-540,"elapsed":630,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f22306df-6617-433f-d2db-f14198d308e2"},"source":["# データフレームの'class'の値で行をグループ化\n","score_df.groupby('class')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f1d1471edd8>"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"rE-IwLMUsSiO","colab":{"base_uri":"https://localhost:8080/","height":173},"executionInfo":{"status":"ok","timestamp":1601894190988,"user_tz":-540,"elapsed":824,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f7b8cbdb-1a36-4afa-9db2-817a3095c91e"},"source":["# グループごとの先頭2行を表示\n","score_df.groupby('class').head(2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user</th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","      <th>eigo</th>\n","      <th>name</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","      <td>50</td>\n","      <td>Paul</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","      <td>50</td>\n","      <td>John</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","      <td>60</td>\n","      <td>Georgi</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","      <td>60</td>\n","      <td>Yoko</td>\n","      <td>B</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user  kokugo  shakai  sugaku  rika  eigo    name class\n","0     1      30      43      51    63    50    Paul     A\n","1     2      39      21      49    56    50    John     A\n","3     4      95      87      77   100    60  Georgi     B\n","4     5      70      71      78    67    60    Yoko     B"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"r1wrUVumsSiP","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601894245904,"user_tz":-540,"elapsed":1259,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"823a6156-b4c8-48d0-9298-b0f01bbbb221"},"source":["# グループごとの\"sugaku\"列,\"rika\"列の値の平均を表示\n","score_df.groupby('class')[[\"sugaku\",\"rika\"]].mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","    <tr>\n","      <th>class</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>A</th>\n","      <td>41.0</td>\n","      <td>58.666667</td>\n","    </tr>\n","    <tr>\n","      <th>B</th>\n","      <td>77.5</td>\n","      <td>83.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       sugaku       rika\n","class                   \n","A        41.0  58.666667\n","B        77.5  83.500000"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"JJUgfXP8sSiQ"},"source":["## 練習\n","データフレーム`score_df`で'class'ごとの'kokugo'と'shakai'の平均を求めてください"]},{"cell_type":"code","metadata":{"id":"S9KBV7d8sSiQ","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1601894293624,"user_tz":-540,"elapsed":1718,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4ae51e1c-ccfd-4f30-f6f9-73a8eb057d26"},"source":["score_df.groupby('class')[[\"kokugo\",\"shakai\"]].mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","    </tr>\n","    <tr>\n","      <th>class</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>A</th>\n","      <td>32.666667</td>\n","      <td>31.333333</td>\n","    </tr>\n","    <tr>\n","      <th>B</th>\n","      <td>82.500000</td>\n","      <td>79.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          kokugo     shakai\n","class                      \n","A      32.666667  31.333333\n","B      82.500000  79.000000"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"M3Hz15MlVwN3"},"source":[""],"execution_count":null,"outputs":[]}]}